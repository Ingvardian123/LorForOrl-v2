package com.lorfororl.weapons;

import com.lorfororl.LorForOrlPlugin;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

public class NuclearBombManager {
    
    private final LorForOrlPlugin plugin;
    private final Map<String, NuclearBomb> activeBombs;
    private final Map<UUID, Long> lastBombTime;
    
    public NuclearBombManager(LorForOrlPlugin plugin) {
        this.plugin = plugin;
        this.activeBombs = new ConcurrentHashMap<>();
        this.lastBombTime = new HashMap<>();
    }
    
    public boolean deployBomb(Player player, Location location, int explosionPower, int radiationRadius) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        if (!player.hasPermission("lorfororl.bomb.deploy")) {
            player.sendMessage("¬ßc‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —è–¥–µ—Ä–Ω—ã—Ö –±–æ–º–±!");
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω (10 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –±–æ–º–±–∞–º–∏)
        UUID playerId = player.getUniqueId();
        long currentTime = System.currentTimeMillis();
        long lastTime = lastBombTime.getOrDefault(playerId, 0L);
        
        if (currentTime - lastTime < 600000) { // 10 –º–∏–Ω—É—Ç
            long remainingTime = (600000 - (currentTime - lastTime)) / 1000;
            player.sendMessage(String.format("¬ßc‚ùå –ö—É–ª–¥–∞—É–Ω! –û—Å—Ç–∞–ª–æ—Å—å: %d —Å–µ–∫—É–Ω–¥", remainingTime));
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        if (!plugin.getAdvancedResearchManager().isResearchCompleted(player, "nuclear_bomb")) {
            player.sendMessage("¬ßc‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: –Ø–¥–µ—Ä–Ω–∞—è –±–æ–º–±–∞!");
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–º–±
        long playerBombs = activeBombs.values().stream()
            .filter(bomb -> bomb.getOwner() != null && bomb.getOwner().equals(player))
            .count();
        
        if (playerBombs >= 1) {
            player.sendMessage("¬ßc‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —è–¥–µ—Ä–Ω–∞—è –±–æ–º–±–∞!");
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∑–æ–Ω—É (–Ω–µ –±–ª–∏–∂–µ 100 –±–ª–æ–∫–æ–≤ –∫ —Å–ø–∞–≤–Ω—É)
        Location spawnLocation = location.getWorld().getSpawnLocation();
        if (location.distance(spawnLocation) < 100) {
            player.sendMessage("¬ßc‚ùå –ù–µ–ª—å–∑—è —Ä–∞–∑–º–µ—â–∞—Ç—å —è–¥–µ—Ä–Ω—ã–µ –±–æ–º–±—ã —Ä—è–¥–æ–º —Å–æ —Å–ø–∞–≤–Ω–æ–º!");
            return false;
        }
        
        // –°–æ–∑–¥–∞–µ–º –±–æ–º–±—É
        String bombId = "bomb_" + player.getName() + "_" + System.currentTimeMillis();
        NuclearBomb bomb = new NuclearBomb(bombId, location, player, explosionPower, radiationRadius, plugin);
        
        activeBombs.put(bombId, bomb);
        lastBombTime.put(playerId, currentTime);
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ–º–±—É
        bomb.arm();
        
        player.sendMessage("¬ß4üí£ –Ø–¥–µ—Ä–Ω–∞—è –±–æ–º–±–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!");
        player.sendMessage("¬ßeüí° ID –±–æ–º–±—ã: " + bombId);
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        plugin.getLogger().warning(String.format("Nuclear bomb deployed by %s at %s", 
            player.getName(), locationToString(location)));
        
        return true;
    }
    
    public boolean defuseBomb(Player player, String bombId) {
        NuclearBomb bomb = activeBombs.get(bombId);
        
        if (bomb == null) {
            player.sendMessage("¬ßc‚ùå –ë–æ–º–±–∞ —Å ID '" + bombId + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            return false;
        }
        
        if (bomb.isExploded()) {
            player.sendMessage("¬ßc‚ùå –≠—Ç–∞ –±–æ–º–±–∞ —É–∂–µ –≤–∑–æ—Ä–≤–∞–ª–∞—Å—å!");
            activeBombs.remove(bombId);
            return false;
        }
        
        boolean success = bomb.defuse(player);
        
        if (success) {
            activeBombs.remove(bombId);
            plugin.getLogger().info(String.format("Nuclear bomb %s defused by %s", 
                bombId, player.getName()));
        }
        
        return success;
    }
    
    public ItemStack createNuclearBombItem() {
        ItemStack bomb = new ItemStack(Material.TNT);
        bomb.getItemMeta().setDisplayName("¬ß4üí£ –Ø–¥–µ—Ä–Ω–∞—è –±–æ–º–±–∞");
        bomb.getItemMeta().setLore(java.util.Arrays.asList(
            "¬ß7–û—Ä—É–∂–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–æ—Ä–∞–∂–µ–Ω–∏—è",
            "¬ßc–í–∑—Ä—ã–≤–Ω–∞—è —Å–∏–ª–∞: 50 –±–ª–æ–∫–æ–≤",
            "¬ße–†–∞–¥–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –∑–æ–Ω–∞: 100 –±–ª–æ–∫–æ–≤",
            "¬ß4‚ö† –ö–†–ê–ô–ù–ï –û–ü–ê–°–ù–û!",
            "",
            "¬ß6–ü–ö–ú - –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
            "¬ß7–í—Ä–µ–º—è –¥–æ –≤–∑—Ä—ã–≤–∞: 15 —Å–µ–∫—É–Ω–¥",
            "",
            "¬ßc–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: –Ø–¥–µ—Ä–Ω–∞—è –±–æ–º–±–∞"
        ));
        bomb.getItemMeta().setCustomModelData(100010);
        
        return bomb;
    }
    
    public void listActiveBombs(Player player) {
        if (activeBombs.isEmpty()) {
            player.sendMessage("¬ßa‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —è–¥–µ—Ä–Ω—ã—Ö –±–æ–º–± –Ω–µ—Ç");
            return;
        }
        
        player.sendMessage("¬ß4üí£ –ê–ö–¢–ò–í–ù–´–ï –Ø–î–ï–†–ù–´–ï –ë–û–ú–ë–´:");
        player.sendMessage("¬ß7" + "=".repeat(40));
        
        for (NuclearBomb bomb : activeBombs.values()) {
            String ownerName = bomb.getOwner() != null ? bomb.getOwner().getName() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
            String status = bomb.isArmed() ? "¬ßc–ê–ö–¢–ò–í–ù–ê" : "¬ß7–ù–µ–∞–∫—Ç–∏–≤–Ω–∞";
            String timeLeft = bomb.isArmed() ? String.format("¬ße%d —Å–µ–∫", bomb.getSecondsLeft()) : "¬ß7-";
            
            player.sendMessage(String.format("¬ß6ID: ¬ßf%s", bomb.getId()));
            player.sendMessage(String.format("¬ß6–í–ª–∞–¥–µ–ª–µ—Ü: ¬ßf%s", ownerName));
            player.sendMessage(String.format("¬ß6–°—Ç–∞—Ç—É—Å: %s", status));
            player.sendMessage(String.format("¬ß6–û—Å—Ç–∞–ª–æ—Å—å: %s", timeLeft));
            player.sendMessage(String.format("¬ß6–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ¬ßf%s", locationToString(bomb.getLocation())));
            player.sendMessage("¬ß7" + "-".repeat(30));
        }
    }
    
    public void emergencyDefuseAll(Player admin) {
        if (!admin.hasPermission("lorfororl.bomb.admin")) {
            admin.sendMessage("¬ßc‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!");
            return;
        }
        
        int defused = 0;
        for (NuclearBomb bomb : activeBombs.values()) {
            if (bomb.isArmed() && !bomb.isExploded()) {
                bomb.defuse(admin);
                defused++;
            }
        }
        
        activeBombs.clear();
        
        admin.sendMessage(String.format("¬ßa‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ –æ–±–µ–∑–≤—Ä–µ–∂–µ–Ω–æ %d —è–¥–µ—Ä–Ω—ã—Ö –±–æ–º–±!", defused));
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        for (Player player : plugin.getServer().getOnlinePlayers()) {
            player.sendTitle("¬ßa¬ßl–í–°–ï –ë–û–ú–ë–´ –û–ë–ï–ó–í–†–ï–ñ–ï–ù–´", 
                "¬ß2–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏", 
                10, 60, 20);
        }
        
        plugin.getLogger().warning(String.format("Emergency defuse of all nuclear bombs by admin %s", 
            admin.getName()));
    }
    
    public void cleanupExpiredBombs() {
        activeBombs.entrySet().removeIf(entry -> entry.getValue().isExploded());
    }
    
    private String locationToString(Location loc) {
        return String.format("%.0f, %.0f, %.0f (%s)", 
            loc.getX(), loc.getY(), loc.getZ(), loc.getWorld().getName());
    }
    
    public Map<String, NuclearBomb> getActiveBombs() {
        return new HashMap<>(activeBombs);
    }
    
    public void shutdown() {
        // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ –æ–±–µ–∑–≤—Ä–µ–∂–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ–º–±—ã –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
        for (NuclearBomb bomb : activeBombs.values()) {
            if (bomb.isArmed() && !bomb.isExploded()) {
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∑—Ä—ã–≤
                bomb.getLocation().getBlock().setType(Material.AIR);
            }
        }
        activeBombs.clear();
        plugin.getLogger().info("All nuclear bombs safely disarmed during shutdown");
    }
}
