package com.lorfororl.gui;

import com.lorfororl.LorForOrlPlugin;
import com.lorfororl.automation.AutoMiner;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.Arrays;
import java.util.Map;

public class AutoMinerGui {
    
    private final LorForOrlPlugin plugin;
    private final AutoMiner autoMiner;
    
    public AutoMinerGui(LorForOrlPlugin plugin, AutoMiner autoMiner) {
        this.plugin = plugin;
        this.autoMiner = autoMiner;
    }
    
    public void openMainGui(Player player) {
        Inventory gui = Bukkit.createInventory(null, 54, ChatColor.DARK_GRAY + "‚õè –ê–≤—Ç–æ—à–∞—Ö—Ç–µ—Ä - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ");
        
        // –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—à–∞—Ö—Ç–µ—Ä–∞
        ItemStack status = createGuiItem(
            autoMiner.isActive() ? Material.GREEN_CONCRETE : Material.RED_CONCRETE,
            autoMiner.isActive() ? ChatColor.GREEN + "‚ö° –ê–ö–¢–ò–í–ï–ù" : ChatColor.RED + "‚ö° –ù–ï–ê–ö–¢–ò–í–ï–ù",
            Arrays.asList(
                ChatColor.WHITE + "–≠–Ω–µ—Ä–≥–∏—è: " + autoMiner.getCurrentEnergy() + "/" + autoMiner.getEnergyCapacity(),
                ChatColor.WHITE + "–†–µ–∂–∏–º: " + autoMiner.getMode().getDisplayName(),
                ChatColor.WHITE + "–û–±–ª–∞—Å—Ç—å: " + autoMiner.getRadius() + "x" + autoMiner.getDepth(),
                ChatColor.WHITE + "–í –æ—á–µ—Ä–µ–¥–∏: " + autoMiner.getQueueSize() + " –±–ª–æ–∫–æ–≤",
                "",
                autoMiner.isActive() ? 
                    ChatColor.RED + "–õ–ö–ú - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" :
                    ChatColor.GREEN + "–õ–ö–ú - –ó–∞–ø—É—Å—Ç–∏—Ç—å"
            )
        );
        gui.setItem(4, status);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—Å—Ç–∏
        ItemStack areaSettings = createGuiItem(Material.COMPASS, ChatColor.YELLOW + "üìê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—Å—Ç–∏",
            Arrays.asList(
                ChatColor.WHITE + "–†–∞–¥–∏—É—Å: " + autoMiner.getRadius() + " –±–ª–æ–∫–æ–≤",
                ChatColor.WHITE + "–ì–ª—É–±–∏–Ω–∞: " + autoMiner.getDepth() + " –±–ª–æ–∫–æ–≤",
                ChatColor.WHITE + "–û–±—â–∏–π –æ–±—ä–µ–º: " + ((autoMiner.getRadius()*2+1) * (autoMiner.getRadius()*2+1) * autoMiner.getDepth()) + " –±–ª–æ–∫–æ–≤",
                "",
                ChatColor.YELLOW + "–õ–ö–ú - –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–¥–∏—É—Å",
                ChatColor.YELLOW + "–ü–ö–ú - –ò–∑–º–µ–Ω–∏—Ç—å –≥–ª—É–±–∏–Ω—É",
                ChatColor.GRAY + "Shift+–õ–ö–ú - –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–ª–∞—Å—Ç—å"
            ));
        gui.setItem(20, areaSettings);
        
        // –†–µ–∂–∏–º –¥–æ–±—ã—á–∏
        ItemStack modeSettings = createGuiItem(Material.DIAMOND_PICKAXE, ChatColor.AQUA + "‚öô –†–µ–∂–∏–º –¥–æ–±—ã—á–∏",
            Arrays.asList(
                ChatColor.WHITE + "–¢–µ–∫—É—â–∏–π: " + autoMiner.getMode().getDisplayName(),
                "",
                ChatColor.GRAY + "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:",
                ChatColor.WHITE + "‚Ä¢ –í—ã–±–æ—Ä–æ—á–Ω–∞—è –¥–æ–±—ã—á–∞",
                ChatColor.WHITE + "‚Ä¢ –¢–æ–ª—å–∫–æ —Ä—É–¥—ã",
                ChatColor.WHITE + "‚Ä¢ –í—Å–µ –±–ª–æ–∫–∏",
                "",
                ChatColor.YELLOW + "–õ–ö–ú - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º"
            ));
        gui.setItem(22, modeSettings);
        
        // –§–∏–ª—å—Ç—Ä—ã –±–ª–æ–∫–æ–≤
        ItemStack blockFilters = createGuiItem(Material.HOPPER, ChatColor.GOLD + "üîç –§–∏–ª—å—Ç—Ä—ã –±–ª–æ–∫–æ–≤",
            Arrays.asList(
                ChatColor.WHITE + "–†–∞–∑—Ä–µ—à–µ–Ω–æ: " + autoMiner.getAllowedBlocks().size() + " —Ç–∏–ø–æ–≤",
                ChatColor.WHITE + "–ó–∞–ø—Ä–µ—â–µ–Ω–æ: " + autoMiner.getBlacklistedBlocks().size() + " —Ç–∏–ø–æ–≤",
                "",
                ChatColor.YELLOW + "–õ–ö–ú - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"
            ));
        gui.setItem(24, blockFilters);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        ItemStack statistics = createGuiItem(Material.BOOK, ChatColor.GREEN + "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            Arrays.asList(
                ChatColor.WHITE + "–î–æ–±—ã—Ç–æ —Å–µ–≥–æ–¥–Ω—è: " + autoMiner.getBlocksMinedToday(),
                ChatColor.WHITE + "–í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ: " + autoMiner.getTotalBlocksMined(),
                ChatColor.WHITE + "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: " + formatTime(autoMiner.getUptime()),
                "",
                ChatColor.YELLOW + "–õ–ö–ú - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
            ));
        gui.setItem(40, statistics);
        
        // –≠–Ω–µ—Ä–≥–∏—è
        double energyPercent = (double) autoMiner.getCurrentEnergy() / autoMiner.getEnergyCapacity() * 100;
        ItemStack energy = createGuiItem(Material.REDSTONE_BLOCK, ChatColor.RED + "‚ö° –≠–Ω–µ—Ä–≥–∏—è",
            Arrays.asList(
                ChatColor.WHITE + String.format("–ó–∞—Ä—è–¥: %d/%d (%.1f%%)", 
                    autoMiner.getCurrentEnergy(), autoMiner.getEnergyCapacity(), energyPercent),
                ChatColor.WHITE + "–†–∞—Å—Ö–æ–¥: " + autoMiner.getEnergyRequired() + " –µ–¥/–±–ª–æ–∫",
                "",
                energyPercent > 50 ? ChatColor.GREEN + "–≠–Ω–µ—Ä–≥–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ" :
                energyPercent > 20 ? ChatColor.YELLOW + "–≠–Ω–µ—Ä–≥–∏—è –Ω–∞ –∏—Å—Ö–æ–¥–µ" :
                ChatColor.RED + "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ —ç–Ω–µ—Ä–≥–∏–∏!",
                "",
                ChatColor.YELLOW + "–õ–ö–ú - –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏"
            ));
        gui.setItem(13, energy);
        
        // –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
        ItemStack maintenance = createGuiItem(Material.ANVIL, ChatColor.DARK_PURPLE + "üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
            Arrays.asList(
                ChatColor.WHITE + "–°–æ—Å—Ç–æ—è–Ω–∏–µ: " + ChatColor.GREEN + "–û—Ç–ª–∏—á–Ω–æ–µ",
                ChatColor.WHITE + "–ò–∑–Ω–æ—Å: 0%",
                ChatColor.WHITE + "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 100%",
                "",
                ChatColor.YELLOW + "–õ–ö–ú - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
                ChatColor.YELLOW + "–ü–ö–ú - –†–µ–º–æ–Ω—Ç"
            ));
        gui.setItem(31, maintenance);
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã
        fillEmptySlots(gui);
        
        player.openInventory(gui);
    }
    
    public void openStatisticsGui(Player player) {
        Inventory gui = Bukkit.createInventory(null, 54, ChatColor.DARK_GREEN + "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—à–∞—Ö—Ç–µ—Ä–∞");
        
        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        ItemStack generalStats = createGuiItem(Material.PAPER, ChatColor.YELLOW + "üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            Arrays.asList(
                ChatColor.WHITE + "–í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ: " + autoMiner.getTotalBlocksMined() + " –±–ª–æ–∫–æ–≤",
                ChatColor.WHITE + "–î–æ–±—ã—Ç–æ —Å–µ–≥–æ–¥–Ω—è: " + autoMiner.getBlocksMinedToday() + " –±–ª–æ–∫–æ–≤",
                ChatColor.WHITE + "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: " + formatTime(autoMiner.getUptime()),
                ChatColor.WHITE + "–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: " + calculateAverageSpeed() + " –±–ª–æ–∫–æ–≤/—á–∞—Å",
                "",
                ChatColor.GREEN + "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: " + calculateEfficiency() + "%"
            ));
        gui.setItem(4, generalStats);
        
        // –î–æ–±—ã—Ç—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        int slot = 18;
        for (Map.Entry<Material, Integer> entry : autoMiner.getMinedResources().entrySet()) {
            if (slot >= 35) break;
            
            Material material = entry.getKey();
            int count = entry.getValue();
            
            ItemStack resourceItem = createGuiItem(material, 
                ChatColor.WHITE + getItemDisplayName(material),
                Arrays.asList(
                    ChatColor.YELLOW + "–î–æ–±—ã—Ç–æ: " + count + " –±–ª–æ–∫–æ–≤",
                    ChatColor.GRAY + "–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ: " + String.format("%.1f%%", 
                        (double) count / autoMiner.getTotalBlocksMined() * 100)
                ));
            
            gui.setItem(slot++, resourceItem);
        }
        
        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        ItemStack backButton = createGuiItem(Material.ARROW, ChatColor.GRAY + "‚Üê –ù–∞–∑–∞–¥",
            Arrays.asList(ChatColor.YELLOW + "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"));
        gui.setItem(49, backButton);
        
        fillEmptySlots(gui);
        player.openInventory(gui);
    }
    
    public void openFilterGui(Player player) {
        Inventory gui = Bukkit.createInventory(null, 54, ChatColor.DARK_BLUE + "üîç –§–∏–ª—å—Ç—Ä—ã –±–ª–æ–∫–æ–≤");
        
        // –†–µ–∂–∏–º—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        ItemStack selectiveMode = createGuiItem(
            autoMiner.getMode() == AutoMiner.MiningMode.SELECTIVE ? Material.LIME_CONCRETE : Material.GRAY_CONCRETE,
            ChatColor.GREEN + "–í—ã–±–æ—Ä–æ—á–Ω–∞—è –¥–æ–±—ã—á–∞",
            Arrays.asList(
                ChatColor.WHITE + "–î–æ–±—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏",
                ChatColor.GRAY + "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫",
                "",
                autoMiner.getMode() == AutoMiner.MiningMode.SELECTIVE ? 
                    ChatColor.GREEN + "‚úì –ê–∫—Ç–∏–≤–µ–Ω" : ChatColor.YELLOW + "–õ–ö–ú - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
            ));
        gui.setItem(10, selectiveMode);
        
        ItemStack oresMode = createGuiItem(
            autoMiner.getMode() == AutoMiner.MiningMode.ORES_ONLY ? Material.LIME_CONCRETE : Material.GRAY_CONCRETE,
            ChatColor.GOLD + "–¢–æ–ª—å–∫–æ —Ä—É–¥—ã",
            Arrays.asList(
                ChatColor.WHITE + "–î–æ–±—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ä—É–¥—ã",
                ChatColor.GRAY + "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä—É–¥—ã",
                "",
                autoMiner.getMode() == AutoMiner.MiningMode.ORES_ONLY ? 
                    ChatColor.GREEN + "‚úì –ê–∫—Ç–∏–≤–µ–Ω" : ChatColor.YELLOW + "–õ–ö–ú - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
            ));
        gui.setItem(12, oresMode);
        
        ItemStack allMode = createGuiItem(
            autoMiner.getMode() == AutoMiner.MiningMode.ALL_BLOCKS ? Material.LIME_CONCRETE : Material.GRAY_CONCRETE,
            ChatColor.RED + "–í—Å–µ –±–ª–æ–∫–∏",
            Arrays.asList(
                ChatColor.WHITE + "–î–æ–±—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–≤–µ—Ä–¥—ã–µ –±–ª–æ–∫–∏",
                ChatColor.RED + "‚ö† –ú–æ–∂–µ—Ç –ø–æ–≤—Ä–µ–¥–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã!",
                "",
                autoMiner.getMode() == AutoMiner.MiningMode.ALL_BLOCKS ? 
                    ChatColor.GREEN + "‚úì –ê–∫—Ç–∏–≤–µ–Ω" : ChatColor.YELLOW + "–õ–ö–ú - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
            ));
        gui.setItem(14, allMode);
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞–º–∏
        ItemStack whitelistManager = createGuiItem(Material.WHITE_WOOL, ChatColor.GREEN + "‚úÖ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫",
            Arrays.asList(
                ChatColor.WHITE + "–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏: " + autoMiner.getAllowedBlocks().size(),
                "",
                ChatColor.YELLOW + "–õ–ö–ú - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º"
            ));
        gui.setItem(30, whitelistManager);
        
        ItemStack blacklistManager = createGuiItem(Material.BLACK_WOOL, ChatColor.RED + "‚ùå –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫",
            Arrays.asList(
                ChatColor.WHITE + "–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏: " + autoMiner.getBlacklistedBlocks().size(),
                "",
                ChatColor.YELLOW + "–õ–ö–ú - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º"
            ));
        gui.setItem(32, blacklistManager);
        
        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        ItemStack backButton = createGuiItem(Material.ARROW, ChatColor.GRAY + "‚Üê –ù–∞–∑–∞–¥",
            Arrays.asList(ChatColor.YELLOW + "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"));
        gui.setItem(49, backButton);
        
        fillEmptySlots(gui);
        player.openInventory(gui);
    }
    
    private ItemStack createGuiItem(Material material, String name, java.util.List<String> lore) {
        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();
        if (meta != null) {
            meta.setDisplayName(name);
            meta.setLore(lore);
            item.setItemMeta(meta);
        }
        return item;
    }
    
    private void fillEmptySlots(Inventory gui) {
        ItemStack filler = new ItemStack(Material.GRAY_STAINED_GLASS_PANE);
        ItemMeta meta = filler.getItemMeta();
        if (meta != null) {
            meta.setDisplayName(" ");
            filler.setItemMeta(meta);
        }
        
        for (int i = 0; i < gui.getSize(); i++) {
            if (gui.getItem(i) == null) {
                gui.setItem(i, filler);
            }
        }
    }
    
    private String formatTime(long milliseconds) {
        long seconds = milliseconds / 1000;
        long minutes = seconds / 60;
        long hours = minutes / 60;
        
        if (hours > 0) {
            return String.format("%d—á %d–º", hours, minutes % 60);
        } else if (minutes > 0) {
            return String.format("%d–º %d—Å", minutes, seconds % 60);
        } else {
            return String.format("%d—Å", seconds);
        }
    }
    
    private String getItemDisplayName(Material material) {
        return material.name().toLowerCase().replace("_", " ");
    }
    
    private double calculateAverageSpeed() {
        long uptime = autoMiner.getUptime();
        if (uptime == 0) return 0;
        
        double hours = uptime / (1000.0 * 60 * 60);
        return autoMiner.getTotalBlocksMined() / Math.max(hours, 0.01);
    }
    
    private int calculateEfficiency() {
        // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –∏ –¥–æ–±—ã—Ç—ã—Ö –±–ª–æ–∫–æ–≤
        long uptime = autoMiner.getUptime();
        if (uptime == 0) return 100;
        
        double expectedBlocks = (uptime / 1000.0) / 5.0; // –û–∂–∏–¥–∞–µ–º 1 –±–ª–æ–∫ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        double actualBlocks = autoMiner.getTotalBlocksMined();
        
        return (int) Math.min(100, (actualBlocks / Math.max(expectedBlocks, 1)) * 100);
    }
}
